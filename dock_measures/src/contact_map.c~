#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include "molecule.h"

//
// Any comments and suggestion may be sent to:
// Author: Björn Wallner
// E-mail: bjorn@sbc.su.se
//   
//


main(argc,argv)		/* Main routine */
     int argc;
     char *argv[];
{
  molecule      m[2];
  int           i,j,k;
  double        d;
  double        mean=0;
  int           atoms=0;
  int           residues=0;
  //  int           contacts[MAXRES][MAXRES]={{}};
  int **contacts;
  double **dist;
  
  //  int           res_contacts[20][20]={{}};
  //  int           restype[20]={};
  //  int           tot_res_contacts=0;
  /// int           type_i,type_j;
  int           current_res_i=0;
  int           current_res_j=0;
  long           selected_resnum;
  int           first=0;
  double        cutoff=0;
  FILE          *fp;
  int error=0;
  double temp;
  int tmp=0;
  int binary=1;
  char chain_name;
  //float        sum=0;
  /* Parse command line for PDB filename */
  if(argc==4)
    {
      strcpy(m[0].filename,argv[2]);
      strcpy(m[1].filename,argv[1]);
      cutoff=strtod(argv[3],(char**)(argv[2]+strlen(argv[2])));
      cutoff=cutoff*cutoff;
    }
  else
    {
      printf("Usage: fnat [pdb_file] [native] cutoff(for binary otherwise distance)\n");
      exit(1);
    }


  error=read_molecules(m,'a');
  if(error==0)
    {  
      residues=m[0].residues;
      contacts = malloc(residues*sizeof(int *));
      dist = malloc(residues*sizeof(double *));
      for(i=0;i<residues;i++) {
	contacts[i] = malloc(residues*sizeof(int));
	dist[i] = malloc(residues*sizeof(double));
      }
      current_res_i=0;
      for(i=0;i<m[0].atoms;i++)  
	{
	  if(m[0].atm[i].rescount!=current_res_i)
	    {
	      for(j=i,current_res_j=current_res_i+1;j<m[0].atoms;j++)
		{

		  if(m[0].atm[j].rescount!=current_res_j)
		    {

		      //	     {
		      //    printf("%d %d %d %d %f %f\n",m[0].atm[j].rescount,m[0].atm[i].rescount,i,j,crd(m,i,j),crd(m,j,i));
		      //printf("%d %s %s %i\n" ,m[0].atm[i].rescount,m[0].atm[i].name,m[0].atm[i].residue,m[0].atm[i].resnum);
		      //printf("%d %s %s %i\n" ,m[0].atm[j].rescount,m[0].atm[j].name,m[0].atm[j].residue,m[0].atm[j].resnum);
		      //printf("%d %d %d %d %f %f\n",m[0].atm[j].rescount,m[0].atm[i].rescount,i,j,crd(m,i,j),crd(m,j,i));
		      //if(abs(m[0].atm[i].rescount-m[0].atm[j].rescount)>5 &&
		      if(strcmp(m[0].atm[j].chain,m[0].atm[i].chain)!=0) {
			//		printf("HEJ %d %d %d %d %f %f\n",current_res_j,current_res_i,i,j,crd(m,i,j),crd(m,j,i));
			d=crd(m,i,j);
			//			printf("%d %d %d %d %s %s %f\n",m[0].atm[j].resnum,m[0].atm[i].resnum,i,j,m[0].atm[j].chain,m[0].atm[i].chain,d);
			
			if(contacts[current_res_i][current_res_j]==0 && d<cutoff)
			  {
			    printf("%d%s %d%s %f\n",m[0].atm[i].resnum,m[0].atm[i].chain,m[0].atm[j].resnum,m[0].atm[j].chain,sqrt(d));
			    contacts[current_res_i][current_res_j]=1;
			    contacts[current_res_j][current_res_i]=1;
			  //res_contacts[get_res(m[0].atm[i].residue)][get_res(m[0].atm[j].residue)]++;
			  //tot_res_contacts++;
			  }
			dist[current_res_i][current_res_j]=d;
			dist[current_res_j][current_res_i]=d;
		      }
		      current_res_j++;
		    }
		}				     
	      current_res_i++;
	    }
	}
      chain_name=m[0].atm[m[0].CA_ref[i]].chain[0];
    }
}

